<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>My Blogs</title>
    
    
    <description>This website is a virtual proof that I&apos;m awesome</description>
    
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>clash tun模式配置</title>
        <description>
          
          1. 劫持系统dns 安装dnsmasq并启动dnsmasq sudo dnf install dnsmasq sudo systemctl start dnsmasq 删除系统自己的resolv.conf,并新建resolv.conf指定dns服务器ip 注：systemd-resolved的dns服务器ip为127.0.0.53，dnsmasq为127.0.0.1 sudo rm /etc/resolv.conf sudo vim /etc/resolv.conf nameserver 127.0.0.1 options edns0 trust-ad search . 注意：需要关闭networkmanager的dns服务器防止dns服务器ip被替换 sudo vim /etc/NetworkManager/NetworkManager.conf [main] dns = none 重启networkmanager sudo systemctl restart NetworkManager 编辑dnsmasq配置文件 sudo vim /etc/dnsmasq.d/clash.conf no-hosts no-resolv server=127.0.0.1#1053 //将dns请求全部转发到clash 重新启动dnsmasq sudo systemctl...
        </description>
        <pubDate>Thu, 11 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/11/clash-tun-mode.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/11/clash-tun-mode.html</guid>
      </item>
    
      <item>
        <title>trojan-go配置</title>
        <description>
          
          1.github下载trojan-go二进制文件 wget https://github.com/p4gefau1t/trojan-go/releases/download/v0.10.6/trojan-go-linux-amd64.zip 2.解压trojan-go并放至/usr/bin,赋予其执行权限 unzip trojan-go-linux-amd64.zip cp trojan-go /usr/bin chmod +x trojan-go 3.将剩余文件放至/etc/trojan-go mkdir /etc/trojan-go cp -r * /etc/trojan-go 4.申请trojan-go的证书 sudo certbot certonly –agree-tos –standalone –no-eff-email -m youremail -d yourdomain 将证书移至/etc/trojan-go中 sudo cp -r /etc/letsencrypt/archive/yourdomain /etc/trojan-go 5.编辑config.json 生成随机uuid cat /proc/sys/kernel/random/uuid config.json { &quot;run_type&quot;: &quot;server&quot;, &quot;local_addr&quot;: &quot;0.0.0.0&quot;, &quot;local_port&quot;: 10010, //与nginx共存时不可填写443端口 &quot;remote_addr&quot;:...
        </description>
        <pubDate>Wed, 10 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/10/trojan-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/10/trojan-config.html</guid>
      </item>
    
      <item>
        <title>nginx配置</title>
        <description>
          
          测试系统：Debian11 1.安装升级系统 sudo apt update 2.安装nginx sudo apt install nginx 3.申请域名 github学生包或者freenom免费域名，添加域名解析，使用nslookup命令查看是否解析成功，注意先不要使用cdn 4.申请证书 zerossl或者letsencrypt即可 letsencrypt申请方法： sudo apt install python3-certbot-nginx 安装完成后： sudo certbot –nginx 5.编辑nginx配置文件 编辑/etc/nginx/sites-enabled/default文件 server { # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL...
        </description>
        <pubDate>Wed, 10 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/10/nginx-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/10/nginx-config.html</guid>
      </item>
    
      <item>
        <title>git配置</title>
        <description>
          
          安装git Linux sudo apt install git //Debian sudo dnf install git //Fedora Windows 直接安装 下载链接 winget安装 winget install --id Git.Git -e --source winget git初步配置 git config --global user.name &quot;username&quot; //用户名 git config --list //已有配置信息 git config --global user.email youremail //邮箱 git config --global core.editor nvim //默认文本编辑器 git config --global merge.tool...
        </description>
        <pubDate>Fri, 05 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/05/git-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/05/git-config.html</guid>
      </item>
    
      <item>
        <title>fedora基本配置</title>
        <description>
          
          1.软件包管理工具 dnf命令 sudo dnf makecache //建立软件包缓存 sudo dnf upgrade //进行软件包更新 sudo dnf upgrade package_name //更新单个软件包 sudo dnf install https://mirrors.ustc.edu.cn/rpmfusion/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.ustc.edu.cn/rpmfusion/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm //启用rpmfusion软件仓库 dnf search package_name //搜索软件包 dnf list kernel-* //查找软件包，使用通配符 dnf list all //列出所有软件包 dnf list installed package_name //列出已安装软件包 dnf group list //列出所有包组 dnf repolist //列出已启用的软件仓库 dnf...
        </description>
        <pubDate>Wed, 03 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/03/fedora-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/03/fedora-config.html</guid>
      </item>
    
      <item>
        <title>frp内网穿透</title>
        <description>
          
          1.frp server端配置 [common] # frp监听的端口，默认是7000，可以改成其他的 bind_port = 14823 vhost_http_port = 12345 # 授权码，请改成更复杂的 token = 12345678 # frp管理后台端口，请按自己需求更改 dashboard_port = 7800 # frp管理后台用户名和密码，请改成自己的 dashboard_user = admin dashboard_pwd = admin enable_prometheus = true 2.frp client端配置 [common] server_addr = yourdomain server_port = 14823 #server端bind_port token = 12345678 #授权码 [ssh] #ssh远程链接 type =...
        </description>
        <pubDate>Sun, 31 Jul 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/07/31/frp-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/07/31/frp-config.html</guid>
      </item>
    
      <item>
        <title>rust学习</title>
        <description>
          
          1.rust函数
fn main(){ //主函数
 println!(&quot;hello world!&quot;);
}

2.Rust变量
Rust 是强类型语言，但具有自动判断变量类型的能力。
声明变量使用let关键字。
重影:指变量的名称可以被重新使用。
有符号类型



长度
有符号
无符号




8bit
i8
u8


16bit
i16
u16


32bit
i32
u32


64bit
i64
u64


128bit
i128
u128


arch
isize
usize




        </description>
        <pubDate>Wed, 27 Jul 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/07/27/rust-practice.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/07/27/rust-practice.html</guid>
      </item>
    
      <item>
        <title>c++链表</title>
        <description>
          
          //查找元素
std::pair&amp;lt;int, int&amp;gt; getElem(int a,list *l1)
{

    list *b=l1;
    int count=0;
    for(;b-&amp;gt;next!=NULL;b=b-&amp;gt;next){
        if(a==b-&amp;gt;a){
            return std::pair&amp;lt;int, int&amp;gt;(a,count); //返回元素和下标
        }
        count++;
    }
    if(b-&amp;gt;a==a){
        return std::pair&amp;lt;int, int&amp;gt;(a,count); //未找到返回-1
    }
    return std::pair&amp;lt;int, int&amp;gt;(a,-1);
    
}


        </description>
        <pubDate>Sun, 24 Apr 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/04/24/c++link.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/04/24/c++link.html</guid>
      </item>
    
  </channel>
</rss>
