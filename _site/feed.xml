<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>duan-dky的小站</title>
    
    
    <description>This website is a virtual proof that I&apos;m awesome</description>
    
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>mailgun收发邮件</title>
        <description>
          
          
        </description>
        <pubDate>Sat, 03 Sep 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/09/03/mailgun-setup.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/09/03/mailgun-setup.html</guid>
      </item>
    
      <item>
        <title>vless配置</title>
        <description>
          
          xray安装 注：我使用的是xray内核，v2ray内核应该也可以 wget https://github.com/XTLS/Xray-core/releases/download/v1.5.10/Xray-linux-64.zip unzip Xray-linux-64.zip cp xray /usr/bin mkdir /etc/xray cp *.dat /etc/xray xray systemd服务 [Unit] Description=Xray Service Documentation=https://github.com/xtls After=network.target nss-lookup.target [Service] ExecStart=/usr/bin/xray run -config /etc/xray/config.json Environment=&quot;XRAY_LOCATION_ASSET=/etc/xray&quot; Restart=on-failure RestartPreventExitStatus=23 LimitNPROC=10000 LimitNOFILE=1000000 [Install] WantedBy=multi-user.target 注意：若xray所在目录和geosite.dat所在目录不一致，需要设置环境变量XRAY_LOCATION_ASSET，不设置此环境变量会导致默认将geosite.dat定位至/use/bin，此目录无geosite.dat，因此服务会报错无法启动 设置systemd服务自动启动 sudo systemctl enable --now xray vless+websocket+tls配置 server端 xray配置 { &quot;log&quot;: { &quot;loglevel&quot;: &quot;warning&quot; //日志级别...
        </description>
        <pubDate>Wed, 31 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/31/vless-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/31/vless-config.html</guid>
      </item>
    
      <item>
        <title>hysteria配置</title>
        <description>
          
          由于hysteria用了udp协议，不受tcp阻断的影响，故尝试此项目。 server端 下载安装 下载 wget https://github.com/HyNetwork/hysteria/releases/download/v1.2.0/hysteria-linux-amd64 编辑配置文件config.json { &quot;listen&quot;: &quot;:37658&quot;, #监听端口 &quot;protocol&quot;: &quot;wechat-video&quot;, #流量类型，支持udp，faketcp，wechat-video &quot;cert&quot;: &quot;/path/to/fullchain.pem&quot;, &quot;key&quot;: &quot;/path/to/privkey.pem&quot;, &quot;alpn&quot;: &quot;h3&quot;, &quot;auth&quot;: { &quot;mode&quot;: &quot;passwords&quot;, &quot;config&quot;: [&quot;yourpassword&quot;] }, &quot;up_mbps&quot;: 100, #限速，建议值不要过高，默认单位：Mbps &quot;down_mbps&quot;: 100 } 启动hysteria ./hysteria -c config.json server 注册为systemd服务 [Unit] Description=Hysteria, a feature-packed network utility optimized for networks of poor...
        </description>
        <pubDate>Mon, 29 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/29/hysteria-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/29/hysteria-config.html</guid>
      </item>
    
      <item>
        <title>自建gitlab</title>
        <description>
          
          安装方式 我选的docker镜像，方便管理 1.拉取docker镜像 docker pull gitlab/gitlab-ee:latest 2.设置gitlab存储位置 export GITLAB_HOME=/srv/gitlab #自己设置位置 3.运行docker镜像 sudo docker run --detach \ --hostname gitlab.example.com \ #外部url，服务器域名 --publish 443:443 --publish 80:80 --publish 22:22 \ #换成自己的端口 --name gitlab \ --restart always \ #设置自动启动 --volume $GITLAB_HOME/config:/etc/gitlab:Z \ #相当于文件挂载点 --volume $GITLAB_HOME/logs:/var/log/gitlab:Z \ --volume $GITLAB_HOME/data:/var/opt/gitlab:Z \ --shm-size 256m \ gitlab/gitlab-ee:latest 4.查看gitlab运行日志...
        </description>
        <pubDate>Sun, 28 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/28/gitlab-setup.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/28/gitlab-setup.html</guid>
      </item>
    
      <item>
        <title>解决dns污染问题</title>
        <description>
          
          起因 由于近期dns污染严重，域名解析不正常，故设置doh，dns分流进行dns解析。 配置 dnsmasq 通过dnsmasq-china-list进行dns分流 安装 git clone https://github.com/felixonmars/dnsmasq-china-list cd dnsmasq-china-list&amp;amp;&amp;amp;bash install.sh sudo systemctl restart dnsmasq //重启dnsmasq 效果 重启dnsmasq太慢，且解析速度下降 mosdns+dnsmasq 安装 mosdns wget https://github.com/IrineSistiana/mosdns/releases/download/v4.1.9/mosdns-linux-amd64.zip unzip mosdns-linux-amd64.zip sudo mkdir /etc/mosdns sudo cp mosdns /usr/bin sudo cp config.yaml /etc/mosdns //配置文件 wget --no-check-certificate https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat -O /etc/mosdns/geosite.dat wget --no-check-certificate https://raw.githubusercontent.com/Loyalsoldier/geoip/release/geoip-only-cn-private.dat -O /etc/mosdns/geoip-only-cn-private.dat //中国ip名单 配置文件...
        </description>
        <pubDate>Fri, 26 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/26/dns-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/26/dns-config.html</guid>
      </item>
    
      <item>
        <title>随机数生成</title>
        <description>
          
          通过系统变量生成 echo $RANDOM 获取特定位数的随机字符,这里为10位 echo $RANDOM |md5sum |cut -c 1-10 获取随机数字,这里为10位 echo $RANDOM |cksum |cut -c 1-10 通过openssl生成 base64编码 openssl rand -base64 10 注：openssl产生的是指定长度个bytes的随机字符，也可使用cksum等命令生成随机数字 通过系统uuid生成 cat /proc/sys/kernel/random/uuid 通过程序实现 C++实现 随机数 生成1~100000之间的随机数，使用srand函数初始化保证每次的随机数不同 # include &amp;lt;iostream&amp;gt; #include&amp;lt;random&amp;gt; #include&amp;lt;time.h&amp;gt; int main(){ srand((unsigned)time(NULL)); int a=1; int b=100000; std::cout &amp;lt;&amp;lt; (rand() % (b - a...
        </description>
        <pubDate>Sun, 21 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/21/random-number.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/21/random-number.html</guid>
      </item>
    
      <item>
        <title>sql server docker镜像配置</title>
        <description>
          
          1.拉取docker镜像 sudo docker pull mcr.microsoft.com/mssql/server:2022-latest 2.创建并运行docker镜像 sudo docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;MSSQL_SA_PASSWORD=&amp;lt;YourPassword&amp;gt;&quot; \ -p 1433:1433 --name sql1 --hostname sql1 \ -d \ mcr.microsoft.com/mssql/server:2022-latest 注：开放1433端口以进行数据库连接，docker镜像名称为sql1 3. 查看sql server服务器是否准备好连接 docker exec -t sql1 cat /var/opt/mssql/log/errorlog | grep connection 4.设置管理员密码 sudo docker exec -it sql1 /opt/mssql-tools/bin/sqlcmd \ -S localhost -U SA \...
        </description>
        <pubDate>Fri, 19 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/19/sqlserver-docker.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/19/sqlserver-docker.html</guid>
      </item>
    
      <item>
        <title>gpg加密解密</title>
        <description>
          
          生成密钥 gpg生成私钥 gpg --gen-key 导出密钥 gpg --export --armor keyID &amp;gt; gpgkey.pub.asc 导入公钥 gpg --import gpgkey.pub.asc 从服务器导入 gpg --keyserver servername --recv-keys keyID 非对称加密解密 加密文件 gpg -e -r username filename 解密文件 gpg -d filename 对称加密解密 加密文件 gpg --symmetric filename 解密文件 gpg -d filename 对文件签名 数字签名 gpg -o filename.sig -s filename 签名+加密 gpg...
        </description>
        <pubDate>Mon, 15 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/15/gpg-encrypt.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/15/gpg-encrypt.html</guid>
      </item>
    
      <item>
        <title>clash tun模式配置</title>
        <description>
          
          1. 劫持系统dns 安装dnsmasq并启动dnsmasq sudo dnf install dnsmasq sudo systemctl start dnsmasq 删除系统自己的resolv.conf,并新建resolv.conf指定dns服务器ip 注：systemd-resolved的dns服务器ip为127.0.0.53，dnsmasq为127.0.0.1 sudo rm /etc/resolv.conf sudo vim /etc/resolv.conf nameserver 127.0.0.1 options edns0 trust-ad search . 注意：需要关闭networkmanager的dns服务器防止dns服务器ip被替换 sudo vim /etc/NetworkManager/NetworkManager.conf [main] dns = none 重启networkmanager sudo systemctl restart NetworkManager 编辑dnsmasq配置文件 sudo vim /etc/dnsmasq.d/clash.conf no-hosts no-resolv server=127.0.0.1#1053 //将dns请求全部转发到clash 重新启动dnsmasq sudo systemctl...
        </description>
        <pubDate>Thu, 11 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/11/clash-tun-mode.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/11/clash-tun-mode.html</guid>
      </item>
    
      <item>
        <title>trojan-go配置</title>
        <description>
          
          1.github下载trojan-go二进制文件 wget https://github.com/p4gefau1t/trojan-go/releases/download/v0.10.6/trojan-go-linux-amd64.zip 2.解压trojan-go并放至/usr/bin,赋予其执行权限 unzip trojan-go-linux-amd64.zip cp trojan-go /usr/bin chmod +x trojan-go 3.将剩余文件放至/etc/trojan-go mkdir /etc/trojan-go cp -r * /etc/trojan-go 4.申请trojan-go的证书 sudo certbot certonly –agree-tos –standalone –no-eff-email -m youremail -d yourdomain 将证书移至/etc/trojan-go中 sudo cp -r /etc/letsencrypt/archive/yourdomain /etc/trojan-go 5.编辑config.json 生成随机uuid cat /proc/sys/kernel/random/uuid config.json { &quot;run_type&quot;: &quot;server&quot;, &quot;local_addr&quot;: &quot;0.0.0.0&quot;, &quot;local_port&quot;: 10010, //与nginx共存时不可填写443端口 &quot;remote_addr&quot;:...
        </description>
        <pubDate>Wed, 10 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/10/trojan-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/10/trojan-config.html</guid>
      </item>
    
      <item>
        <title>nginx配置</title>
        <description>
          
          测试系统：Debian11 1.安装升级系统 sudo apt update 2.安装nginx sudo apt install nginx 3.申请域名 github学生包或者freenom免费域名，添加域名解析，使用nslookup命令查看是否解析成功，注意先不要使用cdn 4.申请证书 zerossl或者letsencrypt即可 80端口验证 sudo apt install python3-certbot-nginx 安装完成后： sudo certbot –nginx 邮箱系统验证 dns验证 泛域名申请 以cloudflare为例： 创建cloudflare api密钥，记下token 创建cloudflare.ini配置文件并放入指定位置 dns_cloudflare_api_token = your_token 申请证书 certbot certonly \ --dns-cloudflare \ --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini \ -d example.com \ -d www.example.com 二级域名申请 sudo certbot...
        </description>
        <pubDate>Wed, 10 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/10/nginx-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/10/nginx-config.html</guid>
      </item>
    
      <item>
        <title>git配置</title>
        <description>
          
          安装git Linux sudo apt install git //Debian sudo dnf install git //Fedora Windows 直接安装 下载链接 winget安装 winget install --id Git.Git -e --source winget git初步配置 git config --global user.name &quot;username&quot; //用户名 git config --list //已有配置信息 git config --global user.email youremail //邮箱 git config --global core.editor nvim //默认文本编辑器 git config --global merge.tool...
        </description>
        <pubDate>Fri, 05 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/05/git-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/05/git-config.html</guid>
      </item>
    
      <item>
        <title>fedora基本配置</title>
        <description>
          
          1.软件包管理工具 dnf命令 sudo dnf makecache //建立软件包缓存 sudo dnf upgrade //进行软件包更新 sudo dnf upgrade package_name //更新单个软件包 sudo dnf install https://mirrors.ustc.edu.cn/rpmfusion/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.ustc.edu.cn/rpmfusion/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm //启用rpmfusion软件仓库 dnf search package_name //搜索软件包 dnf list kernel-* //查找软件包，使用通配符 dnf list all //列出所有软件包 dnf list installed package_name //列出已安装软件包 dnf group list //列出所有包组 dnf repolist //列出已启用的软件仓库 dnf...
        </description>
        <pubDate>Wed, 03 Aug 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/08/03/fedora-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/03/fedora-config.html</guid>
      </item>
    
      <item>
        <title>frp内网穿透</title>
        <description>
          
          1.frp server端配置 [common] # frp监听的端口，默认是7000，可以改成其他的 bind_port = 14823 vhost_http_port = 12345 # 授权码，请改成更复杂的 token = 12345678 # frp管理后台端口，请按自己需求更改 dashboard_port = 7800 # frp管理后台用户名和密码，请改成自己的 dashboard_user = admin dashboard_pwd = admin enable_prometheus = true 2.frp client端配置 [common] server_addr = yourdomain server_port = 14823 #server端bind_port token = 12345678 #授权码 [ssh] #ssh远程链接 type =...
        </description>
        <pubDate>Sun, 31 Jul 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/07/31/frp-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/07/31/frp-config.html</guid>
      </item>
    
      <item>
        <title>rust学习</title>
        <description>
          
          1.rust函数
fn main(){ //主函数
 println!(&quot;hello world!&quot;);
}

2.Rust变量
Rust 是强类型语言，但具有自动判断变量类型的能力。
声明变量使用let关键字。
重影:指变量的名称可以被重新使用。
有符号类型



长度
有符号
无符号




8bit
i8
u8


16bit
i16
u16


32bit
i32
u32


64bit
164
u64


128bit
i128
u128


arch
isize
usize




        </description>
        <pubDate>Wed, 27 Jul 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/07/27/rust-practice.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/07/27/rust-practice.html</guid>
      </item>
    
      <item>
        <title>c++链表</title>
        <description>
          
          //查找元素
std::pair&amp;lt;int, int&amp;gt; getElem(int a,list *l1)
{

    list *b=l1;
    int count=0;
    for(;b-&amp;gt;next!=NULL;b=b-&amp;gt;next){
        if(a==b-&amp;gt;a){
            return std::pair&amp;lt;int, int&amp;gt;(a,count); //返回元素和下标
        }
        count++;
    }
    if(b-&amp;gt;a==a){
        return std::pair&amp;lt;int, int&amp;gt;(a,count); //未找到返回-1
    }
    return std::pair&amp;lt;int, int&amp;gt;(a,-1);
    
}


        </description>
        <pubDate>Sun, 24 Apr 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/04/24/c++link.html</link>
        <guid isPermaLink="true">http://localhost:4000/2022/04/24/c++link.html</guid>
      </item>
    
  </channel>
</rss>
